https://github.com/advisories/GHSA-j2jg-fq62-7c3h
tpl:
gradio

Affected versions
< 5.11.0

vul func:
is_allowed_file()（位于gradio/utils.py）


is_in_or_equal()（路径检查逻辑）

漏洞触发条件
运行环境：Windows 或 macOS（文件系统不区分大小写）。
Gradio 配置：使用 blocked_paths 限制敏感路径（如 resources/admin）。
攻击方式：通过修改路径大小写绕过 ACL（如访问 resources/adMin）。


poc:
# 漏洞利用方式（HTTP 请求）
GET /gradio_api/file=resources/adMin/credential.txt HTTP/1.1

# 漏洞代码（gradio/utils.py）
def is_allowed_file(path: Path, blocked_paths: Sequence[str | Path], ...):
    in_blocklist = any(
        is_in_or_equal(path, blocked_path)  # 未标准化路径大小写
        for blocked_path in blocked_paths
    )
    if in_blocklist:
        return False, "in_blocklist"  # 可被大小写绕过
    ...


漏洞函数
函数名：is_allowed_file
位置：gradio/utils.py 第 1500 至 1517 行
调用关键逻辑：该函数调用 is_in_or_equal 来判断某个路径是否属于 blocked_paths，但未对路径进行大小写归一化。

触发条件
在 大小写不敏感的文件系统（如 Windows、macOS）中运行 Gradio。
blocked_paths 中指定了禁止访问的路径（例如 resources/admin）。
攻击者通过修改 URL 请求中的路径大小写（如 resources/adMin）访问敏感文件。
由于没有统一大小写，路径匹配逻辑被绕过，导致 ACL 无效。

demo.launch(
    blocked_paths=['resources/admin'],
    allowed_paths=['resources/']
)
访问路径：

http://127.0.0.1:7860/gradio_api/file=resources/adMin/credential.txt
尽管 admin 在 blocked_paths 中被禁止，但使用 adMin（大小写不同）可成功访问 credential.txt。

修复建议
路径大小写归一化：在路径比较前，将所有路径转换为小写：

normalized_path = str(path).lower()
normalized_blocked_paths = [str(p).lower() for p in blocked_paths]
版本修复：已在 Gradio 5.11.0 中修复。


