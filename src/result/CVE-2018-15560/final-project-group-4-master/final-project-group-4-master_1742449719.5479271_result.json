{"aes": ["aes.encrypt_image_ecb", "aes.encrypt_image_cbc", "aes.key_generator"], "aes.key_generator": ["<str>.join", "<builtin>.range"], "<str>.join": [], "aes.encrypt_image_cbc": ["aes.aes_cbc_encrypt", "<builtin>.len", "aes.trans_format_RGB", "aes.pad"], "<builtin>.len": [], "aes.pad": ["<builtin>.len"], "aes.aes_cbc_encrypt": ["<str>.encode"], "<str>.encode": [], "aes.trans_format_RGB": ["<builtin>.map", "<builtin>.zip", "<builtin>.tuple"], "<builtin>.map": [], "<builtin>.tuple": [], "<builtin>.zip": [], "aes.encrypt_image_ecb": ["<builtin>.len", "aes.aes_ecb_encrypt", "aes.trans_format_RGB", "aes.pad"], "aes.aes_ecb_encrypt": ["<str>.encode"], "demo.setup": ["setuptools.setup"], "setuptools.setup": [], "demo.main": ["<builtin>.print", "demo.main.decrypt_and_normalize", "<builtin>.range", "<builtin>.len", "demo.main.load_and_encrypt", "demo.main.Net", "<builtin>.int", "demo.main.Net.__init__"], "demo.main.Net": [], "demo.main.load_and_encrypt": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "demo.main.decrypt_and_normalize": ["<builtin>.len", "<builtin>.enumerate"], "demo.main.Net.__init__": ["<builtin>.super"], "<builtin>.super": [], "<builtin>.range": [], "<builtin>.int": [], "<builtin>.print": [], "SamplePytorchExtension.benchmark": ["<builtin>.min", "<builtin>.range", "cpp.lltm.LLTM", "cuda.lltm.LLTM", "<str>.format", "<builtin>.print", "python.lltm.LLTM"], "python.lltm.LLTM": [], "cpp.lltm.LLTM": [], "cuda.lltm.LLTM": [], "<builtin>.min": [], "<str>.format": [], "SamplePytorchExtension.check": ["SamplePytorchExtension.check.check_backward", "SamplePytorchExtension.check.check_forward"], "SamplePytorchExtension.check.check_forward": ["<builtin>.print", "SamplePytorchExtension.check.check_equal"], "SamplePytorchExtension.check.check_equal": ["<builtin>.print", "<builtin>.zip", "<builtin>.enumerate"], "SamplePytorchExtension.check.check_backward": ["<builtin>.print", "SamplePytorchExtension.check.check_equal", "SamplePytorchExtension.check.zero_grad", "SamplePytorchExtension.check.get_grads"], "SamplePytorchExtension.check.get_grads": [], "SamplePytorchExtension.check.zero_grad": [], "SamplePytorchExtension.grad_check": ["torch.autograd.gradcheck", "<builtin>.print"], "torch.autograd.gradcheck": [], "SamplePytorchExtension.python": [], "SamplePytorchExtension.python.lltm": ["SamplePytorchExtension.python.lltm.LLTM"], "SamplePytorchExtension.python.lltm.LLTM": [], "SamplePytorchExtension.python.lltm_baseline": ["SamplePytorchExtension.python.lltm_baseline.LLTM", "SamplePytorchExtension.python.lltm_baseline.LLTMFunction"], "SamplePytorchExtension.python.lltm_baseline.LLTMFunction": ["<builtin>.staticmethod"], "<builtin>.staticmethod": [], "SamplePytorchExtension.python.lltm_baseline.LLTM": [], "SamplePytorchExtension.cuda.jit": ["<builtin>.help", "torch.utils.cpp_extension.load"], "torch.utils.cpp_extension.load": [], "<builtin>.help": [], "SamplePytorchExtension.cuda": [], "SamplePytorchExtension.cuda.setup": ["torch.utils.cpp_extension.CUDAExtension", "setuptools.setup"], "torch.utils.cpp_extension.CUDAExtension": [], "SamplePytorchExtension.cuda.lltm": ["SamplePytorchExtension.cuda.lltm.LLTMFunction", "SamplePytorchExtension.cuda.lltm.LLTM"], "SamplePytorchExtension.cuda.lltm.LLTMFunction": ["<builtin>.staticmethod"], "SamplePytorchExtension.cuda.lltm.LLTM": [], "SamplePytorchExtension.cpp.jit": ["<builtin>.help", "torch.utils.cpp_extension.load"], "SamplePytorchExtension.cpp": [], "SamplePytorchExtension.cpp.setup": ["setuptools.setup", "torch.utils.cpp_extension.CppExtension"], "torch.utils.cpp_extension.CppExtension": [], "SamplePytorchExtension.cpp.lltm": ["SamplePytorchExtension.cpp.lltm.LLTM", "SamplePytorchExtension.cpp.lltm.LLTMFunction"], "SamplePytorchExtension.cpp.lltm.LLTMFunction": ["<builtin>.staticmethod"], "SamplePytorchExtension.cpp.lltm.LLTM": [], "imageLoader.image_to_numpy": ["imageLoader.image_to_numpy.src"], "imageLoader.image_to_numpy.src": [], "PytorchAegis.test_run": ["<builtin>.print", "<builtin>.range"], "PytorchAegis.setup": ["setuptools.setup"], "PytorchAegis.image_to_numpy": ["PytorchAegis.image_to_numpy.src"], "PytorchAegis.image_to_numpy.src": [], "aegisTorch.aegistorch": ["aegisTorch.aegistorch.CNN.__init__", "<builtin>.range", "<builtin>.len", "<builtin>.print", "aegisTorch.aegistorch.CNN", "<builtin>.enumerate"], "aegisTorch.aegistorch.CNN": [], "aegisTorch.aegistorch.CNN.__init__": ["<builtin>.super"], "SamplePytorchExtCUDA.setup": ["setuptools.setup"], "imageLoader.image_to_numpy.src.exif_transpose": ["<builtin>.isinstance", "<builtin>.hasattr"], "<builtin>.hasattr": [], "<builtin>.isinstance": [], "imageLoader.image_to_numpy.src.load_image_file": ["imageLoader.image_to_numpy.src.exif_transpose", "<builtin>.hasattr"], "demo.main.Net.forward": ["demo.main.Net.num_flat_features"], "demo.main.Net.num_flat_features": [], "SamplePytorchExtension.cpp.lltm.LLTM.__init__": ["<builtin>.super", "SamplePytorchExtension.cpp.lltm.LLTM.reset_parameters"], "SamplePytorchExtension.cpp.lltm.LLTM.reset_parameters": [], "SamplePytorchExtension.python.lltm.LLTM.__init__": ["<builtin>.super", "SamplePytorchExtension.python.lltm.LLTM.reset_parameters"], "SamplePytorchExtension.python.lltm.LLTM.reset_parameters": [], "PytorchAegis.image_to_numpy.src.exif_transpose": ["<builtin>.isinstance", "<builtin>.hasattr"], "PytorchAegis.image_to_numpy.src.load_image_file": ["PytorchAegis.image_to_numpy.src.exif_transpose", "<builtin>.hasattr"], "SamplePytorchExtension.python.lltm_baseline.LLTMFunction.backward": ["SamplePytorchExtension.python.lltm_baseline.d_tanh", "SamplePytorchExtension.python.lltm_baseline.d_elu", "SamplePytorchExtension.python.lltm_baseline.d_sigmoid"], "SamplePytorchExtension.python.lltm_baseline.d_tanh": [], "SamplePytorchExtension.python.lltm_baseline.d_sigmoid": [], "SamplePytorchExtension.python.lltm_baseline.d_elu": [], "SamplePytorchExtension.python.lltm_baseline.LLTM.__init__": ["<builtin>.super", "SamplePytorchExtension.python.lltm_baseline.LLTM.reset_parameters"], "SamplePytorchExtension.python.lltm_baseline.LLTM.reset_parameters": [], "aes.trans_format_RGB.<lambda1>": ["<builtin>.range", "<builtin>.len"], "SamplePytorchExtension.cuda.lltm.LLTM.__init__": ["<builtin>.super", "SamplePytorchExtension.cuda.lltm.LLTM.reset_parameters"], "SamplePytorchExtension.cuda.lltm.LLTM.reset_parameters": []}