[
    [
        {
            "function_name": "main",
            "file_path": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/ozipdecrypt.py",
            "line_number": 67,
            "source_code": "def main(file='None'):\n    print (\"ozipdecrypt 0.5 (c) B.Kerler 2017-2019\")\n    if (len(sys.argv)!=2) and os.path.exists(file)==False:\n        print (\"usage: ozipdecrypt.py [*.ozip]\")\n        exit(1)\n    try:file_input=sys.argv[1]\n    except IndexError:file_input=file\n\n    with open(file_input,'rb') as fr:\n        magic=fr.read(12)\n        if (magic==b\"OPPOENCRYPT!\"):\n                pk=False\n        elif magic[:2]==b\"PK\":\n                pk=True\n        else:\n                print (\"ozip has unknown magic, OPPOENCRYPT! expected !\")\n                exit(1)\n        \n        if pk==False:\n            fr.seek(0x1050)\n            data=fr.read(16)\n            key=keytest(data)\n            if (key==-1):\n                print(\"\u672a\u77e5\u7684AES\u5bc6\u94a5\uff0c\u8bf7\u5148\u4eceRecovery\u83b7\u53d6\u89e3\u5bc6\u5bc6\u94a5\uff01!\")\n                exit(1)\n            ctx=AES.new(key,AES.MODE_ECB)\n            filename=file_input[:-4]+\"zip\"\n            with open(filename,'wb') as wf:\n                fr.seek(0x1050)\n                print(\"Decrypting...\")\n                while (True):\n                    data=fr.read(16)\n                    if len(data)==0:\n                        break\n                    wf.write(ctx.decrypt(data))\n                    data = fr.read(0x4000)\n                    if len(data)==0:\n                        break\n                    wf.write(data)\n            print(\"DONE!!\")\n        else:\n            testkey=True\n            with ZipFile(file_input,'r') as zipObj:\n                if os.path.exists('temp'):\n                    rmrf('temp')\n                os.mkdir('temp')\n                if os.path.exists('out'):\n                    rmrf('out')\n                os.mkdir('out')\n                print(\"Extracting \"+file_input)\n                zipObj.extractall('temp')\n                for r, d, f in os.walk('temp'):\n                    for file in f:\n                        rfilename=os.path.join(r, file)\n                        wfilename = os.path.join(\"out\", rfilename[rfilename.rfind('/') + 1:])\n                        with open(rfilename,'rb') as rr:\n                            magic = rr.read(12)\n                            if (magic == b\"OPPOENCRYPT!\"):\n                                if testkey==True:\n                                    with open(os.path.join(\"temp\",\"boot.img\"),\"rb\") as rt:\n                                        rt.seek(0x1050)\n                                        data=rt.read(16)\n                                        key=keytest(data)\n                                        if (key==-1):\n                                            print(\"\u672a\u77e5\u7684AES\u5bc6\u94a5\uff0c\u8bf7\u5148\u4eceRecovery\u83b7\u53d6\u53cd\u5411\u5bc6\u94a5\uff01!\")\n                                            exit(1)\n                                    testkey=False\n                                with open(wfilename,'wb') as wf:\n                                    rr.seek(0x10)\n                                    dsize=int(rr.read(0x10).replace(b\"\\x00\",b\"\").decode('utf-8'),10)\n                                    rr.seek(0x1050)\n                                    print(\"Decrypting \"+rfilename)\n                                    flen=os.stat(rfilename).st_size-0x1050\n\n                                    ctx = AES.new(key, AES.MODE_ECB)\n                                    while (dsize>0):\n                                        if flen>0x4000:\n                                            size=0x4000\n                                        else:\n                                            size=flen\n                                        data = rr.read(size)\n                                        if dsize<size:\n                                            size=dsize\n                                        if len(data)==0:\n                                            break\n                                        dr=ctx.decrypt(data)\n                                        wf.write(dr[:size])\n                                        flen-=size\n                                        dsize-=size\n                            else:\n                                shutil.move(rfilename,wfilename)\n                rmrf('temp')\n                print(\"\u5b8c\u6210 ... \u6587\u4ef6\u5df2\u89e3\u5bc6\u5230 \\\"out\\\" \u76ee\u5f55!!\")\n",
            "parameters": [],
            "focused_calls": [
                "decrypt"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": {},
            "is_vulnerability_reachable": false,
            "unique_id": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/ozipdecrypt.py:main:67"
        }
    ],
    [
        {
            "function_name": "main",
            "file_path": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/ozipdecrypt.py",
            "line_number": 67,
            "source_code": "def main(file='None'):\n    print (\"ozipdecrypt 0.5 (c) B.Kerler 2017-2019\")\n    if (len(sys.argv)!=2) and os.path.exists(file)==False:\n        print (\"usage: ozipdecrypt.py [*.ozip]\")\n        exit(1)\n    try:file_input=sys.argv[1]\n    except IndexError:file_input=file\n\n    with open(file_input,'rb') as fr:\n        magic=fr.read(12)\n        if (magic==b\"OPPOENCRYPT!\"):\n                pk=False\n        elif magic[:2]==b\"PK\":\n                pk=True\n        else:\n                print (\"ozip has unknown magic, OPPOENCRYPT! expected !\")\n                exit(1)\n        \n        if pk==False:\n            fr.seek(0x1050)\n            data=fr.read(16)\n            key=keytest(data)\n            if (key==-1):\n                print(\"\u672a\u77e5\u7684AES\u5bc6\u94a5\uff0c\u8bf7\u5148\u4eceRecovery\u83b7\u53d6\u89e3\u5bc6\u5bc6\u94a5\uff01!\")\n                exit(1)\n            ctx=AES.new(key,AES.MODE_ECB)\n            filename=file_input[:-4]+\"zip\"\n            with open(filename,'wb') as wf:\n                fr.seek(0x1050)\n                print(\"Decrypting...\")\n                while (True):\n                    data=fr.read(16)\n                    if len(data)==0:\n                        break\n                    wf.write(ctx.decrypt(data))\n                    data = fr.read(0x4000)\n                    if len(data)==0:\n                        break\n                    wf.write(data)\n            print(\"DONE!!\")\n        else:\n            testkey=True\n            with ZipFile(file_input,'r') as zipObj:\n                if os.path.exists('temp'):\n                    rmrf('temp')\n                os.mkdir('temp')\n                if os.path.exists('out'):\n                    rmrf('out')\n                os.mkdir('out')\n                print(\"Extracting \"+file_input)\n                zipObj.extractall('temp')\n                for r, d, f in os.walk('temp'):\n                    for file in f:\n                        rfilename=os.path.join(r, file)\n                        wfilename = os.path.join(\"out\", rfilename[rfilename.rfind('/') + 1:])\n                        with open(rfilename,'rb') as rr:\n                            magic = rr.read(12)\n                            if (magic == b\"OPPOENCRYPT!\"):\n                                if testkey==True:\n                                    with open(os.path.join(\"temp\",\"boot.img\"),\"rb\") as rt:\n                                        rt.seek(0x1050)\n                                        data=rt.read(16)\n                                        key=keytest(data)\n                                        if (key==-1):\n                                            print(\"\u672a\u77e5\u7684AES\u5bc6\u94a5\uff0c\u8bf7\u5148\u4eceRecovery\u83b7\u53d6\u53cd\u5411\u5bc6\u94a5\uff01!\")\n                                            exit(1)\n                                    testkey=False\n                                with open(wfilename,'wb') as wf:\n                                    rr.seek(0x10)\n                                    dsize=int(rr.read(0x10).replace(b\"\\x00\",b\"\").decode('utf-8'),10)\n                                    rr.seek(0x1050)\n                                    print(\"Decrypting \"+rfilename)\n                                    flen=os.stat(rfilename).st_size-0x1050\n\n                                    ctx = AES.new(key, AES.MODE_ECB)\n                                    while (dsize>0):\n                                        if flen>0x4000:\n                                            size=0x4000\n                                        else:\n                                            size=flen\n                                        data = rr.read(size)\n                                        if dsize<size:\n                                            size=dsize\n                                        if len(data)==0:\n                                            break\n                                        dr=ctx.decrypt(data)\n                                        wf.write(dr[:size])\n                                        flen-=size\n                                        dsize-=size\n                            else:\n                                shutil.move(rfilename,wfilename)\n                rmrf('temp')\n                print(\"\u5b8c\u6210 ... \u6587\u4ef6\u5df2\u89e3\u5bc6\u5230 \\\"out\\\" \u76ee\u5f55!!\")\n",
            "parameters": [],
            "focused_calls": [
                "decrypt"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": {},
            "is_vulnerability_reachable": false,
            "unique_id": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/ozipdecrypt.py:main:67"
        },
        {
            "function_name": "oppo_ozip",
            "file_path": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py",
            "line_number": 415,
            "source_code": "    def oppo_ozip(self):\n        global ozipmodelerror\n        if quiet==0:\n            if input('\u662f\u5426\u89e3\u5bc6oppo ozip?y/n>>>')=='n':return\n        if ozipmodelerror==1:\n            print('''\n            E:pycrypto\u6a21\u5757\u9519\u8bef!\u4e0d\u652f\u6301oppo ozip\u89e3\u5305!\n            \u6709\u5173pycrypto\u5b89\u88c5\u4fe1\u606f,\u8bf7\u6d4f\u89c8:\n            https://github.com/AEnjoy/unpackandroidrom/blob/master/about_pycrypto.md\n            https://hub.fastgit.org/AEnjoy/unpackandroidrom/blob/master/about_pycrypto.md\n            ''')\n            return\n        ozipdecrypt.main(self.file)\n        self.file=self.file.replace('.ozip','.zip')\n        z=zipfile.ZipFile(self.file)\n        if 'system.new.dat.br' in z.namelist() and 'system.transfer.list' in z.namelist():self.rominfo.brotil=True\n        else:self.rominfo.newdat=True\n        rominformation(self.file)\n        self.unzip()\n",
            "parameters": [],
            "focused_calls": [
                ""
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": {},
            "is_vulnerability_reachable": false,
            "unique_id": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py:oppo_ozip:415"
        },
        {
            "function_name": "__init__",
            "file_path": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py",
            "line_number": 64,
            "source_code": "    def __init__(self,file=''):\n        print('\u6b63\u5728\u5904\u7406ROM\u4fe1\u606f...\u8be5\u8fc7\u7a0b\u9700\u89811s-2min\u5206\u949f\u4e0d\u7b49')\n        '''\u83b7\u53d6ROM\u4fe1\u606f \u8f93\u5165\u7684\u6587\u4ef6\u53ef\u4ee5\u662f\u7ebf\u5237\u5305,\u4e5f\u53ef\u4ee5\u662f\u5361\u5237\u5305'''\n        size=os.path.getsize(file)\n        if os.path.exists(file)==False or size==0:\n            print('E:\u8bf7\u9009\u62e9\u4e00\u4e2a\u6b63\u786e\u7684\u6587\u4ef6!!!')\n            self.flag=1#\u65e0\u6548\u6587\u4ef6\u8def\u5f84\n            return\n        self.file=file\n        if file.find('payload.bin')>-1:\n            self.abflag=True\n            self.flag=3\n            print('\u53d1\u73b0A/B(System As Root)\u66f4\u65b0\u6587\u4ef6(\u5b89\u535310\u52a8\u6001\u5206\u533a)')\n            return\n        if file.find('.ozip') > -1 and zipfile.is_zipfile(file)==True:\n            with open(file,'rb') as fr:\n                magic=fr.read(12)\n                if magic==b\"OPPOENCRYPT!\" or magic[:2]==b\"PK\":\n                    self.ozip=True\n                    print('\u53d1\u73b0OPPO OZIP! \u9700\u8981\u89e3\u5bc6\u540e\u624d\u80fd\u8bfb\u53d6ROM\u4fe1\u606f')\n                fr.close()\n                return\n            print('\u8fd9\u4e2aROM\u53ef\u80fd\u4e0d\u662fOPPO OZIP?!')\n        if file.find('.tar.md5') > -1 and tarfile.is_tarfile(file):\n            self.samsumgodinfile=True\n            a=str(get_saminfo(file))\n            if a:\n                a=a.replace(\"b'\",'')\n                a=a.replace(\".tar\\\\n'\",'')\n                li=a.split(' ')\n                a=li[2].split('_')\n                print('ROM\u7c7b\u578b:'+a[0]+'\\n\u7248\u672c:'+a[1]+'\\n\u53d1\u884c\u6807\u5fd7:'+a[5]+'\\n\u56fa\u4ef6\u7c7b\u578b:offical')\n                print('\u53d1\u73b0\u4e09\u661fodin\u7ebf\u5237\u6587\u4ef6!')\n                print('W:\u53ea\u6709ROM\u7c7b\u578b\u4e3aAP\u624d\u652f\u6301\u89e3\u5305\u51fa\u7cfb\u7edf\u955c\u50cf')\n                return\n            print('Maybe:\u53d1\u73b0\u4e09\u661fodin\u7ebf\u5237\u6587\u4ef6?!')\n        if file.find('.tgz') > -1 and tarfile.is_tarfile(file):\n            #MIUI\n            tar = tarfile.open(file, \"r:gz\")\n            l=tar.getnames()\n            for a in l:\n                if a.find('system.img')>-1 :\n                    self.flag=3\n                    self.miuitar=True\n                    print('Maybe:MIUI \u7ebf\u5237\u5305\u627e\u5230')\n                    return\n                elif a.find('super.img')>-1:\n                    self.flag=3\n                    self.miuitar=True\n                    self.super=True\n                    print('Maybe:MIUI \u7ebf\u5237\u5305\u627e\u5230')                    \n                    return\n        if zipfile.is_zipfile(file)==False:\n            print('E:\u4e0d\u652f\u6301\u7684\u683c\u5f0f!!!!')\n            self.flag=2\n            return\n        self.file=file\n        z=zipfile.ZipFile(file)\n        self.l=z.namelist()\n        self.flag=4\n        #z.close()\n        if 'system.img' in self.l:\n            self.olnyimg=True\n\n        if 'system/framework/framework.jar' in self.l:\n            self.onlyfolder=True\n\n        if 'system.new.dat.br' in self.l and 'system.transfer.list' in self.l:\n            self.brotil=True\n\n        if 'system.new.dat' in self.l and 'system.transfer.list' in self.l:\n            self.newdat=True\n\n        if 'system.transfer.list' in self.l:\n            z.extract('system.transfer.list')\n            f = open('system.transfer.list', 'r')\n            v = int(f.readline())\n            f.close()\n            if v == 1:\n                print('Android Lollipop 5.0 \u68c0\u6d4b\u5230!\\n')\n                self.androidVersion='Lollipop 5.0 API 21'\n            elif v == 2:\n                print('Android Lollipop 5.1 \u68c0\u6d4b\u5230!\\n')\n                self.androidVersion='Lollipop 5.1 API 22'\n            elif v == 3:\n                print('Android Marshmallow 6.x \u68c0\u6d4b\u5230!\\n')\n                self.androidVersion='Marshmallow 6.x API 23'\n            elif v == 4:\n                print('Android Nougat 7.x / Oreo 8.x \u6216\u66f4\u9ad8\u7248\u672c\u68c0\u6d4b\u5230!\\n')\n                self.androidVersion='Nougat 7.x or higher API 24+'\n            os.remove('system.transfer.list')\n        if 'payload.bin' in self.l:\n            self.abflag=True\n            self.flag=4\n            print('\u53d1\u73b0A/B(System As Root)\u66f4\u65b0\u6587\u4ef6(\u5b89\u535310\u52a8\u6001\u5206\u533a)')\n\n        if 'META-INF/com/android/metadata' in self.l:\n            z.extract('META-INF/com/android/metadata')\n            f=open('META-INF/com/android/metadata', encoding='UTF-8')\n            l=[]\n            for i in f:l.append(i.strip())\n            f.close()\n            os.remove('META-INF/com/android/metadata')\n            for i in l:\n                x=i.split('=')\n                if x[0]=='post-build':\n                    text=x[1]\n                    self.info=text.split('/')\n                    if len(self.info)==6:\n                        print('ROM\u5236\u9020\u5546:'+self.info[0]+'\\n\u624b\u673a\u4ee3\u53f7:'+self.info[1]+'\\n\u7248\u672c:'+self.info[2]+'\\nAndroid\u5f00\u53d1\u7248\u672c:'+self.info[3]+'\\n\u56fa\u4ef6\u7248\u672c:'+self.info[4]+'\\n\u53d1\u884c\u6807\u5fd7:'+self.info[5])\n                        z.close()\n                        return\n                    else:\n                        print('\u60a8\u7684\u8bbe\u5907\u6307\u7eb9\u53ef\u80fd\u5df2\u7ecf\u88ab\u4fee\u6539,\u65e0\u6cd5\u83b7\u53d6ROM\u4fe1\u606f!!!')\n        else:\n            print('metadata\u6587\u4ef6\u4e0d\u5b58\u5728?!')\n            z.close()\n            \n\n        for names in self.l:#prop\u83b7\u53d6Android\u7248\u672c\n            if names.find('build.prop') > -1:\n                try:z.extract(names)\n                except:pass\n                if os.path.exists(names):\n                    f=open(names, encoding='UTF-8')\n                    l=[]\n                    for i in f:l.append(i.strip())\n                    f.close()\n                    os.remove(names)\n                    for i in l:\n                        x=i.split('=')\n                        if x[0]=='ro.build.fingerprint':#Android \u6307\u7eb9\u5e93\n                            text=x[1]\n                            self.info=text.split('/')\n                            if len(self.info)==6:\n                                print('ROM\u5236\u9020\u5546:'+self.info[0]+'\\n\u624b\u673a\u4ee3\u53f7:'+self.info[1]+'\\n\u7248\u672c:'+self.info[2]+'\\nAndroid\u5f00\u53d1\u7248\u672c:'+self.info[3]+'\\n\u56fa\u4ef6\u7248\u672c:'+self.info[4]+'\\n\u53d1\u884c\u6807\u5fd7:'+self.info[5])\n                                z.close()\n                                return\n                            else:\n                                print('\u60a8\u7684\u8bbe\u5907\u6307\u7eb9\u53ef\u80fd\u5df2\u7ecf\u88ab\u4fee\u6539,\u65e0\u6cd5\u83b7\u53d6ROM\u4fe1\u606f!!!')\n\n        if 'META-INF/com/google/android/updater-script' in self.l:\n            z.extract('META-INF/com/google/android/updater-script')\n            f=open('META-INF/com/google/android/updater-script', encoding='UTF-8')\n            l=[]\n            for i in f:l.append(i.strip())\n            f.close()\n            os.remove('META-INF/com/google/android/updater-script')\n            for i in l:\n                if 'ui_print(\"Target:' in i:\n                    i=i.replace('ui_print(\"Target:','')\n                    i=i.replace('\");','')\n                    i=i.replace(' ','')\n                    self.info=i.split('/')\n                    if len(self.info)==6:\n                        print('ROM\u5236\u9020\u5546:'+self.info[0]+'\\n\u624b\u673a\u4ee3\u53f7:'+self.info[1]+'\\n\u7248\u672c:'+self.info[2]+'\\nAndroid\u5f00\u53d1\u7248\u672c:'+self.info[3]+'\\n\u56fa\u4ef6\u7248\u672c:'+self.info[4]+'\\n\u53d1\u884c\u6807\u5fd7:'+self.info[5])\n                        z.close()\n                        return\n                if (i.find('update-binary') > -1 and i.find('ummy') > -1) or  i.find('#MAGISK') > -1:\n                    self.flag=5\n                    print('\u53d1\u73b0\u8be5\u538b\u7f29\u5305\u4e3a\u529f\u80fd\u6027\u5361\u5237\u5305!(Magisk/oepngapps/ak2/ak3/etc.')\n                    z.close()\n                    return\n            print('W:\u65e0\u6cd5\u4eceupdater-script\u83b7\u53d6ROM\u4fe1\u606f!!')\n        if zipfile.is_zipfile(file)==False:\n            if file.find('.kdz') > -1:\n                print('Maybe:\u53d1\u73b0LG .kdz\u6587\u4ef6!\\n\u6b63\u5728\u6d4b\u8bd5\u662f\u5426\u4e3a .kdz\u6587\u4ef6...')\n                if lg_kd_kdz(file).islgkdzfile():\n                    self.lgkdz=True\n                    self.flag=3\n                    self.type=3\n                    print('\u53d1\u73b0LG .kdz\u6587\u4ef6!')\n                    return\n                else:\n                    print('\u8fd9\u4e2a\u6587\u4ef6\u53ef\u80fd\u4e0d\u662fLG .kdz\u6587\u4ef6?')\n                    self.flag=2\n                    return\n            if file.find('.dz') > -1:\n                print('Maybe:\u53d1\u73b0LG .dz\u6587\u4ef6!\\n\u6b63\u5728\u6d4b\u8bd5\u662f\u5426\u4e3a .dz\u6587\u4ef6...')\n                if lg_kd_kdz(file).islgdzfile():\n                    self.lgkd=True\n                    self.flag=3\n                    self.type=3  \n                    print('\u53d1\u73b0LG .dz\u6587\u4ef6!')\n                else:\n                    print('\u8fd9\u4e2a\u6587\u4ef6\u53ef\u80fd\u4e0d\u662fLG .dz\u6587\u4ef6?')\n                    self.flag=2                    \n                    return\n            print('\u65e0\u6548\u4e0d\u53ef\u8bfb\u683c\u5f0f?')\n            self.flag=2\n            return\n        z.close()\n",
            "parameters": [],
            "focused_calls": [
                ""
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": {},
            "is_vulnerability_reachable": false,
            "unique_id": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py:__init__:64"
        },
        {
            "function_name": "main",
            "file_path": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py",
            "line_number": 592,
            "source_code": "def main(args=None):\n    global quiet\n    if os.path.exists('rom')==False:os.mkdir('rom')\n    if args.file:rom=rominformation(args.file)\n    if args.version:\n        print('Android ROM Unpack Tool \\r\\n \u5b89\u5353ROM\u89e3\u5305\u5de5\u5177 \\r\\n Version:2.2.4 \\r\\n BuildDate: 2021-8-22 19:09:49')\n        sys.exit(0)\n    else:\n        file=input('\u8bf7\u9009\u62e9\u4e00\u4e2a\u5904\u7406\u7684ROM>>>')\n        if file=='':\n            print('E:\u8bf7\u9009\u62e9\u4e00\u4e2aROM\u6587\u4ef6!')\n            exit(1)\n        elif os.path.exists(file):rom=rominformation(file)\n        else:\n            print('E:\u8bf7\u9009\u62e9\u4e00\u4e2aROM\u6587\u4ef6!')\n            exit(1)            \n    if args.type=='kdz':rom.lgkdz=True\n    elif args.type=='dz':rom.lgkd=True\n    elif args.type=='samsumgodin':rom.samsumgodinfile=True\n    elif args.type=='abota':rom.abflag=True\n    elif args.type=='ozip':rom.ozip=True\n    elif args.type=='flashable':rom.flag=5\n    elif args.type=='miuitar':\n        rom.miuitar=True\n        rom.flag=3\n    elif args.type=='newdat':rom.newdat=True\n    elif args.type=='newdatbr':rom.brotil=True\n    if args.quit:quiet=1\n    unpackrom(args.file,rom)\n",
            "parameters": [],
            "focused_calls": [
                null
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": {},
            "is_vulnerability_reachable": false,
            "unique_id": "/PyVul/src/context/dataset/test_data/unpackandroidrom-master/main.py:main:592"
        }
    ]
]
