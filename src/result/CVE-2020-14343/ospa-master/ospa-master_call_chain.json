[
    [
        {
            "function_name": "get_cli_args",
            "file_path": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-14343/ospa-master/ospa.py",
            "line_number": 227,
            "source_code": "def get_cli_args(cli_parser):\n    crun_args = vars(cli_parser.parse_args())\n    for k, val in available_args.items():\n        crun_args[k] = crun_args[val[0][1].strip('-').replace('-', '_')]\n\n    crun_args = {k: val for k, val in crun_args.items() if k in available_args}\n\n    if not crun_args['config-path']:\n        crun_args['config-path'] = 'config.yaml'\n\n    if not Path(crun_args['config-path']).exists():\n        c.print(f'[yellow]Config file not found on {crun_args[\"config-path\"] or default_values[\"config-path\"]}'\n                f', creating\u2026[/yellow]')\n\n        sanit = {k: v for k, v in default_values.items() if k != 'config-path'}\n\n        Path(crun_args['config-path']).write_text(yaml.dump(sanit))\n\n        c.print(f'[green]Config file created![/green]\\n')\n\n    else:\n        run_args_live = yaml.load(Path(crun_args['config-path']).read_text('utf-8'), Loader=yaml.FullLoader)\n        for k, val in crun_args.items():\n            if val is None:\n                crun_args[k] = run_args_live.get(k, default_values[k])\n\n    return crun_args\n",
            "parameters": [],
            "focused_calls": [
                "load"
            ],
            "extend_calls": [],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-14343/ospa-master/ospa.py:get_cli_args:227"
        }
    ]
]
