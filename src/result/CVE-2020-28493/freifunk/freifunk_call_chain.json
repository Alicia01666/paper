[
    [
        {
            "function_name": "walk",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py",
            "line_number": 48,
            "source_code": "def walk(node):\n    \"\"\" renders key-values and lists for single communities \"\"\"\n    html = \"\"\n    for key, value in node.items():\n        html += f\"<dt>{key.capitalize()}</dt>\"\n        if is_dict(value):\n            html += f\"<dd>{walk(value)}</dd>\"\n        elif is_list(value):\n            for val in value:\n                if is_dict(val):\n                    html += f\"<dd>{walk(val)}</dd>\"\n                else:\n                    html += f\"<dd>{urlize(val)}</dd>\"\n        else:\n            html += f\"<dd>{urlize(str(value))}</dd>\"\n    return f\"<dl>{html}</dl>\"\n",
            "parameters": [],
            "focused_calls": [
                "urlize"
            ],
            "extend_calls": [
                "def is_list(var):\n    \"\"\" check if variable is a list \"\"\"\n    return isinstance(var, list)",
                "def walk(node):\n    \"\"\" renders key-values and lists for single communities \"\"\"\n    html = \"\"\n    for key, value in node.items():\n        html += f\"<dt>{key.capitalize()}</dt>\"\n        if is_dict(value):\n            html += f\"<dd>{walk(value)}</dd>\"\n        elif is_list(value):\n            for val in value:\n                if is_dict(val):\n                    html += f\"<dd>{walk(val)}</dd>\"\n                else:\n                    html += f\"<dd>{urlize(val)}</dd>\"\n        else:\n            html += f\"<dd>{urlize(str(value))}</dd>\"\n    return f\"<dl>{html}</dl>\"",
                "def is_dict(var):\n    \"\"\" check if variable is a dict \"\"\"\n    return isinstance(var, dict)"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py:walk:48"
        },
        {
            "function_name": "render_community",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py",
            "line_number": 65,
            "source_code": "def render_community(template_path, data):\n    \"\"\" renders the community's api detail page \"\"\"\n\n    try:\n        data['state']['lastchange'] = dateutil.parser.parse(\n            data['state']['lastchange'])\n    except dateutil.parser.ParserError:\n        pass\n    except TypeError:\n        pass\n    latlon = (float(data['location']['lat']), float(data['location']['lon']))\n\n    community, url, api, validation = data['name'], data['url'], data['api'], data['validation']\n    del data['name'], data['url'], data['api'], data['validation']\n\n    template = env.get_template(template_path)\n\n    content = walk(data)\n\n    html = template.render(community=community, url=url, api=api, latlon=latlon, bbox=gen_bbox(\n        latlon), now=datetime.now().ctime(), validation=validation, data=content)\n    return html.encode('utf-8')\n",
            "parameters": [],
            "focused_calls": [
                "walk"
            ],
            "extend_calls": [
                "def gen_bbox(latlon):\n    \"\"\" creates a map box for the community\"\"\"\n    bbox = [latlon[1]-0.05, latlon[0]-0.01, latlon[1]+0.05, latlon[0]+0.01]\n    return '%2C'.join(map(str, bbox))",
                "def walk(node):\n    \"\"\" renders key-values and lists for single communities \"\"\"\n    html = \"\"\n    for key, value in node.items():\n        html += f\"<dt>{key.capitalize()}</dt>\"\n        if is_dict(value):\n            html += f\"<dd>{walk(value)}</dd>\"\n        elif is_list(value):\n            for val in value:\n                if is_dict(val):\n                    html += f\"<dd>{walk(val)}</dd>\"\n                else:\n                    html += f\"<dd>{urlize(val)}</dd>\"\n        else:\n            html += f\"<dd>{urlize(str(value))}</dd>\"\n    return f\"<dl>{html}</dl>\""
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py:render_community:65"
        },
        {
            "function_name": "render_communities",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py",
            "line_number": 209,
            "source_code": "def render_communities(build_dir, ff_api_specs, communities, rendered):\n    \"\"\" renders all community files \"\"\"\n    print(\"\\t[*] Rendering communities.....\", end=\"\")\n    for name, data in communities.items():\n        path = os.path.join(build_dir, f\"{name}.html\")\n        data['validation'] = validate_community(ff_api_specs, deepcopy(data))\n        with open(path, 'wb') as community_file:\n            community_file.write(render_community(\"community.html\", deepcopy(data)))\n            rendered[name] = data\n    print(\"Done!!\")\n",
            "parameters": [],
            "focused_calls": [
                "render_community"
            ],
            "extend_calls": [
                "def render_community(template_path, data):\n    \"\"\" renders the community's api detail page \"\"\"\n\n    try:\n        data['state']['lastchange'] = dateutil.parser.parse(\n            data['state']['lastchange'])\n    except dateutil.parser.ParserError:\n        pass\n    except TypeError:\n        pass\n    latlon = (float(data['location']['lat']), float(data['location']['lon']))\n\n    community, url, api, validation = data['name'], data['url'], data['api'], data['validation']\n    del data['name'], data['url'], data['api'], data['validation']\n\n    template = env.get_template(template_path)\n\n    content = walk(data)\n\n    html = template.render(community=community, url=url, api=api, latlon=latlon, bbox=gen_bbox(\n        latlon), now=datetime.now().ctime(), validation=validation, data=content)\n    return html.encode('utf-8')",
                "def validate_community(specs, instance):\n    \"\"\" Validate a single community file \"\"\"\n    if instance['api'] not in specs.keys():\n        print(\n            f\"[+] Invalid or unknown API version {instance['api']}: {instance['url']}\")\n        return {}\n\n    try:\n        del instance[\"mtime\"]\n    except KeyError:\n        pass\n\n    try:\n        del instance[\"etime\"]\n    except KeyError:\n        pass\n\n    try:\n        del instance[\"error\"]\n    except KeyError:\n        pass\n\n    if instance['api'].startswith(\"0.5.\"):\n        try:\n            del instance['location']['lat']\n            del instance['location']['lon']\n            for num, _ in enumerate(instance['location']['additionalLocations']):\n                del instance['location']['additionalLocations'][num]['lat']\n                del instance['location']['additionalLocations'][num]['lon']\n        except KeyError:\n            pass\n\n    validation = jsonschema.Draft7Validator(specs[instance['api']])\n    errors = sorted(validation.iter_errors(instance), key=str)\n\n    validation_result = {}\n    if errors:\n        status = \"invalid\"\n        status_text = \"Invalid\"\n        for error in errors:\n            joined_path = \"->\".join(str(path) for path in error.path)\n            collected_errors = f\"<li>Error in {joined_path}: {error.message}</li>\"\n        result = f\"<ul>{collected_errors}</ul\"\n    elif version.parse(instance['api']) < version.parse(\"0.4.0\"):\n        status = \"warning\"\n        status_text = \"Warning\"\n        result = \"API version too old! You should upgrade your file\"\n    else:\n        status = \"valid\"\n        status_text = \"Valid\"\n        result = \"\"\n\n    validation_result[\"status\"] = status\n    validation_result[\"status_text\"] = status_text\n    validation_result[\"result\"] = result\n\n    return validation_result"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py:render_communities:209"
        },
        {
            "function_name": "main",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py",
            "line_number": 160,
            "source_code": "def main():\n    \"\"\" our main method \"\"\"\n    print(\"[*] Started.....\")\n\n    if len(sys.argv) < 2:\n        print(\"[+] Usage: py render.py buildDir\")\n        sys.exit(0)\n\n    build_dir = sys.argv[1]\n    if not os.path.isdir(build_dir):\n        os.makedirs(build_dir)\n\n    # fetching github repo for the spec files\n    print(\"\\t[*] Fetching GH repo....\", end=\"\")\n    ghub_repo = requests.get(\n        \"https://github.com/freifunk/api.freifunk.net/archive/refs/heads/master.zip\", timeout=12)\n    if ghub_repo.status_code != 200:\n        print(\"\\n\\t[+] Can't fetch GH repo\")\n        sys.exit(0)\n\n    file_name = extract_api(ghub_repo)\n\n    ff_api_specs = get_api_specs()\n\n    # communities\n    communities = get_communities()\n\n    rendered = {}\n\n    render_communities(build_dir, ff_api_specs, communities, rendered)\n\n    print(\"\\t[*] Rendering index page....\", end=\"\")\n    index = os.path.join(build_dir, \"index.html\")\n    with open(index, \"wb\") as index_file:\n        index_file.write(render_index(\"index.html\", rendered))\n    print(\"Done!!\")\n\n    print(\"\\t[*] Copying static files.....\", end=\"\")\n    static_files = os.listdir('static')\n    for file in static_files:\n        src = os.path.join('static', file)\n        target = os.path.join(build_dir, file)\n        if os.path.isfile(src):\n            shutil.copyfile(src, target)\n    print(\"Done!!\")\n\n    remove_temp_file(file_name, \"api.freifunk.net-master\")\n    print(f\"[*] Successfully generated pages in {build_dir}\")\n",
            "parameters": [],
            "focused_calls": [
                "render_communities"
            ],
            "extend_calls": [
                "def render_communities(build_dir, ff_api_specs, communities, rendered):\n    \"\"\" renders all community files \"\"\"\n    print(\"\\t[*] Rendering communities.....\", end=\"\")\n    for name, data in communities.items():\n        path = os.path.join(build_dir, f\"{name}.html\")\n        data['validation'] = validate_community(ff_api_specs, deepcopy(data))\n        with open(path, 'wb') as community_file:\n            community_file.write(render_community(\"community.html\", deepcopy(data)))\n            rendered[name] = data\n    print(\"Done!!\")",
                "def get_api_specs():\n    \"\"\" open all api specifications \"\"\"\n    print(\"\\t[*] Loading Specs......\", end=\"\")\n    ff_api_specs = {}\n    spec_dir = \"./api.freifunk.net-master/specs/*.json\"\n    spec_files = glob.glob(spec_dir)\n    for file in spec_files:\n        with open(file, \"r\", encoding=\"utf8\") as file_content:\n            ff_api_specs[Path(file).stem] = json.loads(file_content.read())\n    print(\"Done!!\")\n    return ff_api_specs",
                "def remove_temp_file(_zip, extracted, build=0):\n    \"\"\" To remove the temp files generated while building \"\"\"\n    try:\n        print(\"\\t[*] Removing temp files....\", end=\"\")\n        if build:\n            shutil.rmtree(build)\n        os.remove(_zip)\n        shutil.rmtree(extracted)\n        print(\"Done!!\")\n    except Exception as exception:\n        print(\"\\n[+] Error while removing temp files\")\n        raise exception",
                "def get_communities():\n    \"\"\" load all community data \"\"\"\n    print(\"\\t[*] Loading Communities files........\", end=\"\")\n    summ_file = requests.get(\n        \"https://api.freifunk.net/data/ffSummarizedDir.json\", timeout=10)\n    if summ_file.status_code != 200:\n        print(\"\\n\\t[+] Can't fetch ffSummarizedDir file\")\n        sys.exit(0)\n    communities = json.loads(summ_file.content)\n    print(\"Done!!\")\n    return communities",
                "def render_index(template_path, communities):\n    \"\"\" renders the index page \"\"\"\n    template = env.get_template(template_path)\n    html = template.render(communities=communities, now=datetime.now().ctime())\n    return html.encode(\"utf-8\")",
                "def extract_api(ghub_repo):\n    \"\"\" Open API repository downloaded from github \"\"\"\n    file_name = os.path.join(os.getcwd(), \"api_freifunk.zip\")\n    with open(file_name, \"wb\") as api_file:\n        api_file.write(ghub_repo.content)\n        print(\"Done!!\")\n\n    print(\"\\t[*] Extracting files......\", end=\"\")\n    with ZipFile(file_name, 'r') as repo:\n        repo.extractall()\n        print(\"Done!!\")\n    return file_name"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/freifunk/render3.py:main:160"
        }
    ]
]
