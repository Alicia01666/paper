[
    [
        {
            "function_name": "process_fb_comment",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 42,
            "source_code": "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict\n",
            "parameters": [],
            "focused_calls": [
                "urlize"
            ],
            "extend_calls": [
                "def add_target_blank(text):\n    '''\n    This is pretty awful, but the jinja filter will have a keyword for target blank pretty soon and this can\n    be removed.\n    '''\n    text = text.replace('<a href', '<a target=\"_blank\" href')\n    return text",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def relative_time(date):\n    if not date:\n        return ''\n    time_diff = now_utc() - date\n    if time_diff.days < 1:\n        if time_diff.seconds < 60 * 60:\n            diff = time_diff.seconds / 60\n            return \"{} {} ago\".format(diff, pluralize('minute', diff))\n        diff = time_diff.seconds / (60 * 60)\n        return \"{} {} ago\".format(diff, pluralize('hour', diff))\n    elif time_diff.days < 31:\n        diff = time_diff.days\n        return \"{} {} ago\".format(diff, pluralize('day', diff))\n    elif time_diff.days < 365:\n        diff = time_diff.days / 31\n        return \"{} {} ago\".format(diff, pluralize('month', diff))\n    diff = time_diff.days / 365\n    return \"{} {} ago\".format(diff, pluralize('year', diff))"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:process_fb_comment:42"
        },
        {
            "function_name": "update_facebook_comments",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 17,
            "source_code": "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()\n",
            "parameters": [],
            "focused_calls": [
                "process_fb_comment"
            ],
            "extend_calls": [
                "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def add_or_update(social_id, gallery_uuid, body):\n        body = str(json.dumps(body))\n\n        item = Comment.get(social_id=str(social_id), gallery_uuid=gallery_uuid)\n        if item:\n            item = Comment.update(item.uuid, body=body)\n        else:\n            args_dict = {'gallery_uuid': gallery_uuid,\n                         'social_id': social_id,\n                         'body': body}\n            item = Comment.create(**args_dict)\n        return item"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:update_facebook_comments:17"
        },
        {
            "function_name": "get_comments_for_galleries",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 127,
            "source_code": "def get_comments_for_galleries():\n    galleries = Gallery.get_list(published=True)\n    tweets = []\n    for gallery in galleries:\n        gallery_uuid = gallery.uuid\n        url = 'https://www.kateheddleston.com/blog/{}'.format(gallery_uuid)\n        update_facebook_comments(url, gallery_uuid)\n        tweets = tweets + update_tweet_comments(url, gallery_uuid)\n    return tweets\n",
            "parameters": [],
            "focused_calls": [
                "update_facebook_comments"
            ],
            "extend_calls": [
                "def update_tweet_comments(url, entity_uuid):\n    auth = tweepy.OAuthHandler(config.TWITTER_CONSUMER_KEY, config.TWITTER_CONSUMER_SECRET)\n    api = tweepy.API(auth)\n    tweets = search_twitter(url, api, entity_uuid)\n    return tweets",
                "def get_list(cls, to_json=False, **kwargs):\n        items = get_list(cls, **kwargs)\n        return jsonify_model(items) if to_json else items",
                "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:get_comments_for_galleries:127"
        }
    ],
    [
        {
            "function_name": "process_fb_comment",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 42,
            "source_code": "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict\n",
            "parameters": [],
            "focused_calls": [
                "urlize"
            ],
            "extend_calls": [
                "def add_target_blank(text):\n    '''\n    This is pretty awful, but the jinja filter will have a keyword for target blank pretty soon and this can\n    be removed.\n    '''\n    text = text.replace('<a href', '<a target=\"_blank\" href')\n    return text",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def relative_time(date):\n    if not date:\n        return ''\n    time_diff = now_utc() - date\n    if time_diff.days < 1:\n        if time_diff.seconds < 60 * 60:\n            diff = time_diff.seconds / 60\n            return \"{} {} ago\".format(diff, pluralize('minute', diff))\n        diff = time_diff.seconds / (60 * 60)\n        return \"{} {} ago\".format(diff, pluralize('hour', diff))\n    elif time_diff.days < 31:\n        diff = time_diff.days\n        return \"{} {} ago\".format(diff, pluralize('day', diff))\n    elif time_diff.days < 365:\n        diff = time_diff.days / 31\n        return \"{} {} ago\".format(diff, pluralize('month', diff))\n    diff = time_diff.days / 365\n    return \"{} {} ago\".format(diff, pluralize('year', diff))"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:process_fb_comment:42"
        },
        {
            "function_name": "update_facebook_comments",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 17,
            "source_code": "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()\n",
            "parameters": [],
            "focused_calls": [
                "process_fb_comment"
            ],
            "extend_calls": [
                "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def add_or_update(social_id, gallery_uuid, body):\n        body = str(json.dumps(body))\n\n        item = Comment.get(social_id=str(social_id), gallery_uuid=gallery_uuid)\n        if item:\n            item = Comment.update(item.uuid, body=body)\n        else:\n            args_dict = {'gallery_uuid': gallery_uuid,\n                         'social_id': social_id,\n                         'body': body}\n            item = Comment.create(**args_dict)\n        return item"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:update_facebook_comments:17"
        },
        {
            "function_name": "get_comments_for_talks",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 138,
            "source_code": "def get_comments_for_talks():\n    talks = Talk.get_list(published=True)\n    tweets = []\n    for talk in talks:\n        talk_uuid = talk.uuid\n        url = 'https://www.kateheddleston.com/talks/{}'.format(talk_uuid)\n        update_facebook_comments(url, talk_uuid)\n        tweets = tweets + update_tweet_comments(url, talk_uuid)\n",
            "parameters": [],
            "focused_calls": [
                "update_facebook_comments"
            ],
            "extend_calls": [
                "def update_tweet_comments(url, entity_uuid):\n    auth = tweepy.OAuthHandler(config.TWITTER_CONSUMER_KEY, config.TWITTER_CONSUMER_SECRET)\n    api = tweepy.API(auth)\n    tweets = search_twitter(url, api, entity_uuid)\n    return tweets",
                "def get_list(cls, to_json=False, **kwargs):\n        items = get_list(cls, **kwargs)\n        return jsonify_model(items) if to_json else items",
                "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:get_comments_for_talks:138"
        }
    ],
    [
        {
            "function_name": "process_fb_comment",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 42,
            "source_code": "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict\n",
            "parameters": [],
            "focused_calls": [
                "urlize"
            ],
            "extend_calls": [
                "def add_target_blank(text):\n    '''\n    This is pretty awful, but the jinja filter will have a keyword for target blank pretty soon and this can\n    be removed.\n    '''\n    text = text.replace('<a href', '<a target=\"_blank\" href')\n    return text",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def relative_time(date):\n    if not date:\n        return ''\n    time_diff = now_utc() - date\n    if time_diff.days < 1:\n        if time_diff.seconds < 60 * 60:\n            diff = time_diff.seconds / 60\n            return \"{} {} ago\".format(diff, pluralize('minute', diff))\n        diff = time_diff.seconds / (60 * 60)\n        return \"{} {} ago\".format(diff, pluralize('hour', diff))\n    elif time_diff.days < 31:\n        diff = time_diff.days\n        return \"{} {} ago\".format(diff, pluralize('day', diff))\n    elif time_diff.days < 365:\n        diff = time_diff.days / 31\n        return \"{} {} ago\".format(diff, pluralize('month', diff))\n    diff = time_diff.days / 365\n    return \"{} {} ago\".format(diff, pluralize('year', diff))"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:process_fb_comment:42"
        },
        {
            "function_name": "update_facebook_comments",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 17,
            "source_code": "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()\n",
            "parameters": [],
            "focused_calls": [
                "process_fb_comment"
            ],
            "extend_calls": [
                "def process_fb_comment(comment, post_link, graph):\n    fb_dict = {}\n    fb_dict['id'] = comment.get('id')\n    fb_dict['name'] = comment.get('from').get('name')\n    fb_dict['screen_name'] = comment.get('from').get('name')\n    fb_dict['user'] = comment.get('from')\n    fb_dict['author'] = comment.get('from')\n    fb_dict['user_url'] = 'https://www.facebook.com/{}'.format(comment.get('from').get('id'))\n    fb_dict['entities'] = []\n    fb_dict['created_time'] = comment.get('created_time')\n    created_time = datetime.datetime.strptime(comment.get('created_time').split('+')[0], '%Y-%m-%dT%H:%M:%S')\n    fb_dict['created_at'] = relative_time(created_time)\n    fb_dict['link'] = post_link\n    fb_dict['text'] = add_target_blank(urlize(comment.get('message')))\n    fb_dict['source'] = 'facebook'\n\n    user = graph.request('{}/picture'.format(comment.get('from').get('id')))\n    fb_dict['profile_image'] = user.get('url')\n    return fb_dict",
                "def get(cls, to_json=False, **kwargs):\n        item = get(cls, **kwargs)\n        return jsonify_model(item) if to_json else item",
                "def add_or_update(social_id, gallery_uuid, body):\n        body = str(json.dumps(body))\n\n        item = Comment.get(social_id=str(social_id), gallery_uuid=gallery_uuid)\n        if item:\n            item = Comment.update(item.uuid, body=body)\n        else:\n            args_dict = {'gallery_uuid': gallery_uuid,\n                         'social_id': social_id,\n                         'body': body}\n            item = Comment.create(**args_dict)\n        return item"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:update_facebook_comments:17"
        },
        {
            "function_name": "get_comments_for_item",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py",
            "line_number": 120,
            "source_code": "def get_comments_for_item(uuid):\n    url = \"{}/blog/{}\".format(config.APP_BASE_LINK, uuid)\n    tweets = update_facebook_comments(url, uuid)\n    tweets = tweets + update_tweet_comments(url, uuid)\n    return tweets\n",
            "parameters": [],
            "focused_calls": [
                "update_facebook_comments"
            ],
            "extend_calls": [
                "def update_tweet_comments(url, entity_uuid):\n    auth = tweepy.OAuthHandler(config.TWITTER_CONSUMER_KEY, config.TWITTER_CONSUMER_SECRET)\n    api = tweepy.API(auth)\n    tweets = search_twitter(url, api, entity_uuid)\n    return tweets",
                "def update_facebook_comments(url, entity_uuid):\n    access_token = get(User, email='kate.heddleston@gmail.com').code\n    graph = facebook.GraphAPI(access_token)\n    post_response = graph.get_object('me/posts')\n    comments = []\n    counter = 0\n    while post_response.get('paging', {}).get('next') is not None:\n        for post in post_response['data']:\n            if url in post.get('message', ''):\n                comment_response = graph.request('{}/comments'.format(post.get('id')))\n                comments = comments + comment_response.get('data')\n                while comment_response.get('paging', {}).get('next') is not None:\n                    after = comment_response.get('paging', {}).get('cursors', {}).get('after')\n                    comment_response = graph.request('{}/comments'.format(post.get('id')), {'after': after})\n                    comments = comments + comment_response.get('data')\n                link = \"https://www.facebook.com/photo.php?fbid={}\".format(post.get('id').split('_')[0])\n                comments = [process_fb_comment(comment, link, graph) for comment in comments]\n                for comment in comments:\n                    Comment.add_or_update(comment.get('id'), entity_uuid, comment)\n                return comments\n        if counter > 10:\n            return []\n        post_response = requests.get(post_response.get('paging', {}).get('next')).json()"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-28493/kateheddleston/app/comments.py:get_comments_for_item:120"
        }
    ]
]
