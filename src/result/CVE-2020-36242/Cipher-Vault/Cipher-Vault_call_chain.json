[
    [
        {
            "function_name": "encrypt_data",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 18,
            "source_code": "def encrypt_data(data, key):\n    fernet = Fernet(key)\n    encrypted_data = fernet.encrypt(data.encode())\n    return encrypted_data\n",
            "parameters": [],
            "focused_calls": [
                "encrypt"
            ],
            "extend_calls": [],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:encrypt_data:18"
        },
        {
            "function_name": "save_passwords",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 30,
            "source_code": "def save_passwords(passwords, key, current):\n    encrypted_passwords = []\n    for website, username, password in passwords:\n        encrypted_website = encrypt_data(website, key)\n        encrypted_username = encrypt_data(username, key)\n        encrypted_password = encrypt_data(password, key)\n        encrypted_passwords.append(\n            (encrypted_website, encrypted_username, encrypted_password)\n        )\n\n    with open(f\"data/{current}.enc\", \"wb\") as file:\n        for (\n            encrypted_website,\n            encrypted_username,\n            encrypted_password,\n        ) in encrypted_passwords:\n            file.write(encrypted_website + b\"\\n\")\n            file.write(encrypted_username + b\"\\n\")\n            file.write(encrypted_password + b\"\\n\")\n",
            "parameters": [],
            "focused_calls": [
                "encrypt_data"
            ],
            "extend_calls": [
                "def encrypt_data(data, key):\n    fernet = Fernet(key)\n    encrypted_data = fernet.encrypt(data.encode())\n    return encrypted_data"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:save_passwords:30"
        },
        {
            "function_name": "add_password",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 345,
            "source_code": "    def add_password(self):\n        website = self.website_entry.get()\n        username = self.new_username_entry.get()\n        password = self.new_password_entry.get()\n\n        if not website or not username or not password:\n            messagebox.showerror(\"Error\", \"All fields are required!\")\n            return\n\n        self.passwords.append((website, username, password))\n        save_passwords(\n            self.passwords, self.key, self.current_user\n        )  # Save passwords to the encrypted file\n        messagebox.showinfo(\"Success\", \"Password added successfully!\")\n        self.show_password_page()\n",
            "parameters": [],
            "focused_calls": [
                "save_passwords"
            ],
            "extend_calls": [
                "def show_password_page(self):\n        self.clear_window()\n        self.root.geometry(\"800x500\")\n\n        # Title\n        title_label = ttk.Label(\n            self.root,\n            text=\"Saved Passwords\",\n            font=(\"Helvetica\", 20, \"bold\"),\n            foreground=\"#ECEFF4\",\n            background=\"#2E3440\",\n        )\n        title_label.pack(pady=20)\n\n        # Treeview to display passwords\n        columns = (\"Website\", \"Username\", \"Password\")\n        self.tree = ttk.Treeview(\n            self.root, columns=columns, show=\"headings\", style=\"Custom.Treeview\"\n        )\n        for col in columns:\n            self.tree.heading(col, text=col)\n        self.tree.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)\n\n        # Load passwords from the encrypted file\n        self.passwords = load_passwords(self.key, self.current_user)\n        self.refresh_password_list()\n\n        # Hide/Show Password Button\n        self.hide_password = True\n        toggle_password_button = ttk.Button(\n            self.root,\n            text=\"Show Passwords\",\n            command=self.toggle_password_visibility,\n            style=\"Accent.TButton\",\n        )\n        toggle_password_button.pack(pady=10)\n\n        # Add Password Button\n        add_password_button = ttk.Button(\n            self.root,\n            text=\"Add Password\",\n            command=self.show_add_password_page,\n            style=\"Accent.TButton\",\n        )\n        add_password_button.pack(pady=10)\n\n        # Logout Button\n        logout_button = ttk.Button(\n            self.root, text=\"Logout\", command=self.logout, style=\"Accent.TButton\"\n        )\n        logout_button.pack(pady=10)",
                "def save_passwords(passwords, key, current):\n    encrypted_passwords = []\n    for website, username, password in passwords:\n        encrypted_website = encrypt_data(website, key)\n        encrypted_username = encrypt_data(username, key)\n        encrypted_password = encrypt_data(password, key)\n        encrypted_passwords.append(\n            (encrypted_website, encrypted_username, encrypted_password)\n        )\n\n    with open(f\"data/{current}.enc\", \"wb\") as file:\n        for (\n            encrypted_website,\n            encrypted_username,\n            encrypted_password,\n        ) in encrypted_passwords:\n            file.write(encrypted_website + b\"\\n\")\n            file.write(encrypted_username + b\"\\n\")\n            file.write(encrypted_password + b\"\\n\")"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:add_password:345"
        }
    ],
    [
        {
            "function_name": "encrypt_data",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 18,
            "source_code": "def encrypt_data(data, key):\n    fernet = Fernet(key)\n    encrypted_data = fernet.encrypt(data.encode())\n    return encrypted_data\n",
            "parameters": [],
            "focused_calls": [
                "encrypt"
            ],
            "extend_calls": [],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:encrypt_data:18"
        },
        {
            "function_name": "save_users",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 51,
            "source_code": "def save_users(users, key):\n    encrypted_users = []\n    for user, passwd in users.items():\n        encrypt_user = encrypt_data(user, key)\n        encrypt_passwd = encrypt_data(passwd, key)\n        encrypted_users.append((encrypt_user, encrypt_passwd))\n\n    with open(\"data/users.enc\", \"wb\") as file:\n        for user, passwd in encrypted_users:\n            file.write(user + b\"\\n\")\n            file.write(passwd + b\"\\n\")\n",
            "parameters": [],
            "focused_calls": [
                "encrypt_data"
            ],
            "extend_calls": [
                "def encrypt_data(data, key):\n    fernet = Fernet(key)\n    encrypted_data = fernet.encrypt(data.encode())\n    return encrypted_data"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:save_users:51"
        },
        {
            "function_name": "signup",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py",
            "line_number": 371,
            "source_code": "    def signup(self):\n        username = self.signup_username_entry.get()\n        password = self.signup_password_entry.get()\n        confirm_password = self.confirm_password_entry.get()\n\n        if password != confirm_password:\n            messagebox.showerror(\"Signup Failed\", \"Passwords do not match\")\n            return\n\n        if username in self.users:\n            messagebox.showerror(\"Signup Failed\", \"Username already exists\")\n            return\n\n        self.users[username] = password\n        save_users(self.users, self.key)\n        messagebox.showinfo(\"Signup Successful\", \"Account created successfully\")\n        self.show_login_page()\n",
            "parameters": [],
            "focused_calls": [
                "save_users"
            ],
            "extend_calls": [
                "def save_users(users, key):\n    encrypted_users = []\n    for user, passwd in users.items():\n        encrypt_user = encrypt_data(user, key)\n        encrypt_passwd = encrypt_data(passwd, key)\n        encrypted_users.append((encrypt_user, encrypt_passwd))\n\n    with open(\"data/users.enc\", \"wb\") as file:\n        for user, passwd in encrypted_users:\n            file.write(user + b\"\\n\")\n            file.write(passwd + b\"\\n\")",
                "def show_login_page(self):\n        self.clear_window()\n        self.root.geometry(\"400x300\")\n\n        # Title\n        title_label = ttk.Label(\n            self.root,\n            text=\"Login\",\n            font=(\"Helvetica\", 20, \"bold\"),\n            foreground=\"#ECEFF4\",\n            background=\"#2E3440\",\n        )\n        title_label.pack(pady=20)\n\n        # Username\n        username_label = ttk.Label(\n            self.root, text=\"Username:\", foreground=\"#ECEFF4\", background=\"#2E3440\"\n        )\n        username_label.pack()\n        self.username_entry = ttk.Entry(self.root, width=30)\n        self.username_entry.pack(pady=5)\n\n        # Password\n        password_label = ttk.Label(\n            self.root, text=\"Password:\", foreground=\"#ECEFF4\", background=\"#2E3440\"\n        )\n        password_label.pack()\n        self.password_entry = ttk.Entry(self.root, width=30, show=\"*\")\n        self.password_entry.pack(pady=5)\n\n        # Login Button\n        login_button = ttk.Button(\n            self.root, text=\"Login\", command=self.login, style=\"Accent.TButton\"\n        )\n        login_button.pack(pady=10)\n\n        # Signup Link\n        signup_label = ttk.Label(\n            self.root,\n            text=\"Don't have an account? Sign up\",\n            cursor=\"hand2\",\n            foreground=\"#81A1C1\",\n            background=\"#2E3440\",\n        )\n        signup_label.pack(pady=5)\n        signup_label.bind(\"<Button-1>\", lambda e: self.show_signup_page())"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Cipher-Vault/UI.py:signup:371"
        }
    ]
]
