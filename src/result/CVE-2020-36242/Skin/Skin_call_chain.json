[
    [
        {
            "function_name": "encrypt",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Skin/a.py",
            "line_number": 3,
            "source_code": "def encrypt(filename, key):\n    f = Fernet(key)\n    with open(filename, \"rb\") as file:\n        file_data = file.read()\n    encrypted_data = f.encrypt(file_data)\n    with open(filename, \"wb\") as file:\n        file.write(encrypted_data)\n",
            "parameters": [],
            "focused_calls": [
                "encrypt"
            ],
            "extend_calls": [
                "def encrypt(filename, key):\n    f = Fernet(key)\n    with open(filename, \"rb\") as file:\n        file_data = file.read()\n    encrypted_data = f.encrypt(file_data)\n    with open(filename, \"wb\") as file:\n        file.write(encrypted_data)"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Skin/a.py:encrypt:3"
        }
    ],
    [
        {
            "function_name": "home",
            "file_path": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Skin/app/views.py",
            "line_number": 44,
            "source_code": "def home(request):\n    prediction = image = None\n    disease = DiseaseDetail.objects.all().order_by('id')\n    carecenter= SkinCareCenter.objects.all().order_by('id')\n    if request.method == \"POST\" and request.FILES['affectedphoto']: \n        if request.user.is_authenticated:\n            image = request.FILES['affectedphoto'].name\n            f = Fernet(key)\n            encrypted = f.encrypt(image.encode())\n            print(encrypted)\n            addProfile = UserUpload(user= request.user, image= encrypted)\n            addProfile.save()\n            imagePath = addProfile.image.url\n           \n            # encrypt(imagePath.strip('/'),key)\n            # decrypted = decrypt_and_decode(imagePath.strip('/'), key, 'utf-8')\n            fullImagePath = \"C:/Users/Admin/Desktop/Files/Skin Disease Detection System/detection_system\" + imagePath\n\n            image = Image.open(fullImagePath)\n            resizedImage = image.resize((256, 256))\n           \n            # Convert the image to a NumPy array\n            imageArray = np.array(resizedImage)\n\n            trainedModel = tf.keras.models.load_model('C:/Users/Admin/Documents/Model/trained.h1')\n            prediction = predict(trainedModel, imageArray)\n        else:\n            return redirect('/login')\n    return render(request, 'home.html',\n                  {'diseases':disease,\n                   'carecenters': carecenter,\n                   'prediction' : prediction,\n                   'image': image})\n",
            "parameters": [],
            "focused_calls": [
                "encrypt"
            ],
            "extend_calls": [
                "def predict(model, img):\n    img_array = tf.keras.preprocessing.image.img_to_array(img)\n    img_array = tf.expand_dims(img_array, 0)\n\n    predictions = model.predict(img_array)\n\n    predicted_class = class_names[np.argmax(predictions[0])]\n    confidence = round(100 * (np.max(predictions[0])), 2)\n    return predicted_class, confidence",
                "def encrypt(filename, key):\n    f = Fernet(key)\n    with open(filename, \"rb\") as file:\n        file_data = file.read()\n    encrypted_data = f.encrypt(file_data)\n    with open(filename, \"wb\") as file:\n        file.write(encrypted_data)"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2020-36242/Skin/app/views.py:home:44"
        }
    ]
]
