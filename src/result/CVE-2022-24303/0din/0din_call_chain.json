[
    [
        {
            "function_name": "process_epub",
            "file_path": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2022-24303/0din/srs/previews.py",
            "line_number": 145,
            "source_code": "def process_epub(input_file, output_file):\n    \"\"\"Generate a thumbnail from an EPUB ebook\"\"\"\n    try:\n        book = epub.read_epub(input_file)\n        cover = None\n\n        for item in book.get_items():\n            if item.get_type() == ebooklib.ITEM_COVER:\n                cover = item.content\n                break\n\n        if cover:\n            with open(tempfile.mktemp(suffix=\".jpg\"), 'wb') as f:\n                f.write(cover)\n                img = Image.open(f.name)\n                img.thumbnail((512, 512))\n                img.save(output_file, \"WEBP\")\n        else:\n            process_generic_placeholder(output_file)\n        print(f\"EPUB preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process EPUB: {e}\")\n",
            "parameters": [],
            "focused_calls": [
                "mktemp"
            ],
            "extend_calls": [
                "def process_generic_placeholder(output_file):\n    \"\"\"Generate a placeholder preview for unsupported file types\"\"\"\n    try:\n        img = Image.new(\"RGB\", (512, 512), (200, 200, 200))\n        d = ImageDraw.Draw(img)\n        d.text((100, 250), \"Preview Not Available\", fill=(0, 0, 0))\n        img.save(output_file, \"WEBP\")\n        print(f\"Generic placeholder saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to create placeholder: {e}\")"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2022-24303/0din/srs/previews.py:process_epub:145"
        },
        {
            "function_name": "generate_image_preview",
            "file_path": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2022-24303/0din/srs/previews.py",
            "line_number": 16,
            "source_code": "def generate_image_preview(input_file, output_file):\n    try:\n        # Identify the file type based on extension\n        file_ext = os.path.splitext(input_file)[1].lower()\n\n        if file_ext in ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff']:\n            # Process image files\n            process_image(input_file, output_file)\n        elif file_ext in ['.mp4', '.mkv', '.avi', '.mov', '.webm']:\n            # Process video files\n            process_video(input_file, output_file)\n        elif file_ext in ['.mp3', '.wav', '.ogg', '.flac']:\n            # Process audio files\n            process_audio(input_file, output_file)\n        elif file_ext == '.pdf':\n            # Process PDF files\n            process_pdf(input_file, output_file)\n        elif file_ext == '.docx':\n            # Process DOCX files\n            process_docx(input_file, output_file)\n        elif file_ext == '.pptx':\n            # Process PPTX files\n            process_pptx(input_file, output_file)\n        elif file_ext == '.epub':\n            # Process EPUB files\n            process_epub(input_file, output_file)\n        elif file_ext in ['.txt', '.md', '.py', '.html', '.css', '.js']:\n            # Process text and code files\n            process_text(input_file, output_file)\n        elif file_ext in ['.zip', '.tar', '.gz']:\n            # Process archive files\n            process_archive(input_file, output_file)\n        else:\n            # Fallback for unsupported file types\n            process_generic_placeholder(output_file)\n    except Exception as e:\n        print(f\"Error processing file: {e}\")\n",
            "parameters": [],
            "focused_calls": [
                "process_epub"
            ],
            "extend_calls": [
                "def process_audio(input_file, output_file):\n    \"\"\"Generate a waveform image from an audio file\"\"\"\n    try:\n        # Load audio file\n        audio = AudioSegment.from_file(input_file)\n        data = audio.get_array_of_samples()\n\n        # Plot waveform\n        plt.figure(figsize=(8, 4))\n        plt.plot(data[:10000])  # Only plot first 10k samples for preview\n        plt.axis('off')\n        \n        # Save the waveform as an image\n        plt.savefig(output_file, format=\"webp\", bbox_inches='tight', pad_inches=0)\n        plt.close()\n        print(f\"Audio preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process audio: {e}\")",
                "def process_video(input_file, output_file):\n    \"\"\"Generate a video thumbnail using ffmpegthumbnailer\"\"\"\n    try:\n        command = ['ffmpegthumbnailer', '-i', input_file, '-o', output_file, '-s', '512', '-f']\n        subprocess.run(command, check=True)\n        print(f\"Video preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process video: {e}\")",
                "def process_pdf(input_file, output_file):\n    \"\"\"Generate a thumbnail from the first page of a PDF\"\"\"\n    try:\n        pdf_document = fitz.open(input_file)\n        page = pdf_document.load_page(0)  # Get the first page\n        pix = page.get_pixmap()\n        img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n        img.thumbnail((512, 512))\n        img.save(output_file, \"WEBP\")\n        print(f\"PDF preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process PDF: {e}\")",
                "def process_docx(input_file, output_file):\n    \"\"\"Generate a thumbnail from the first page of a DOCX document\"\"\"\n    try:\n        doc = Document(input_file)\n        if doc.paragraphs:\n            text = doc.paragraphs[0].text\n        else:\n            text = \"No content\"\n        \n        # Create a blank image and draw text\n        img = Image.new(\"RGB\", (512, 512), (255, 255, 255))\n        d = ImageDraw.Draw(img)\n        d.text((10, 10), text[:200], fill=(0, 0, 0))  # Show the first 200 characters\n        img.save(output_file, \"WEBP\")\n        print(f\"DOCX preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process DOCX: {e}\")",
                "def process_text(input_file, output_file):\n    \"\"\"Generate a preview from text or code file\"\"\"\n    try:\n        with open(input_file, 'r') as f:\n            text = f.read(200)  # Read the first 200 characters\n        \n        img = Image.new(\"RGB\", (512, 512), (255, 255, 255))\n        d = ImageDraw.Draw(img)\n        d.text((10, 10), text, fill=(0, 0, 0))\n        img.save(output_file, \"WEBP\")\n        print(f\"Text preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process text file: {e}\")",
                "def process_generic_placeholder(output_file):\n    \"\"\"Generate a placeholder preview for unsupported file types\"\"\"\n    try:\n        img = Image.new(\"RGB\", (512, 512), (200, 200, 200))\n        d = ImageDraw.Draw(img)\n        d.text((100, 250), \"Preview Not Available\", fill=(0, 0, 0))\n        img.save(output_file, \"WEBP\")\n        print(f\"Generic placeholder saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to create placeholder: {e}\")",
                "def process_archive(input_file, output_file):\n    \"\"\"Generate a preview of archive contents\"\"\"\n    try:\n        if zipfile.is_zipfile(input_file):\n            with zipfile.ZipFile(input_file, 'r') as archive:\n                file_list = archive.namelist()[:10]  # Show first 10 files\n        elif tarfile.is_tarfile(input_file):\n            with tarfile.open(input_file, 'r') as archive:\n                file_list = [tarinfo.name for tarinfo in archive.getmembers()][:10]\n        else:\n            file_list = []\n\n        img = Image.new(\"RGB\", (512, 512), (255, 255, 255))\n        d = ImageDraw.Draw(img)\n        d.text((10, 10), \"\\n\".join(file_list), fill=(0, 0, 0))  # Display file names\n        img.save(output_file, \"WEBP\")\n        print(f\"Archive preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process archive: {e}\")",
                "def process_pptx(input_file, output_file):\n    \"\"\"Generate a thumbnail from the first slide of a PPTX presentation\"\"\"\n    try:\n        prs = Presentation(input_file)\n        first_slide = prs.slides[0]\n        \n        # Create an image with the title text\n        if first_slide.shapes.title:\n            title = first_slide.shapes.title.text\n        else:\n            title = \"No Title\"\n        \n        img = Image.new(\"RGB\", (512, 512), (255, 255, 255))\n        d = ImageDraw.Draw(img)\n        d.text((10, 10), title[:200], fill=(0, 0, 0))  # Show the first 200 characters\n        img.save(output_file, \"WEBP\")\n        print(f\"PPTX preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process PPTX: {e}\")",
                "def process_epub(input_file, output_file):\n    \"\"\"Generate a thumbnail from an EPUB ebook\"\"\"\n    try:\n        book = epub.read_epub(input_file)\n        cover = None\n\n        for item in book.get_items():\n            if item.get_type() == ebooklib.ITEM_COVER:\n                cover = item.content\n                break\n\n        if cover:\n            with open(tempfile.mktemp(suffix=\".jpg\"), 'wb') as f:\n                f.write(cover)\n                img = Image.open(f.name)\n                img.thumbnail((512, 512))\n                img.save(output_file, \"WEBP\")\n        else:\n            process_generic_placeholder(output_file)\n        print(f\"EPUB preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process EPUB: {e}\")",
                "def process_image(input_file, output_file):\n    \"\"\"Downscale image and save as webp\"\"\"\n    try:\n        with Image.open(input_file) as img:\n            img.thumbnail((512, 512))  # Resize to 512x512 max\n            img.save(output_file, \"WEBP\")\n        print(f\"Image preview saved at {output_file}\")\n    except Exception as e:\n        print(f\"Failed to process image: {e}\")"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2022-24303/0din/srs/previews.py:generate_image_preview:16"
        }
    ]
]
