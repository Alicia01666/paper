[
    [
        {
            "function_name": "send",
            "file_path": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2024-28237/sensor-community-to-prometheus/main.py",
            "line_number": 18,
            "source_code": "    def send(self, content: str, code: int, mime: str):\n        content = content.encode('utf8')\n        self.send_response(code)\n        self.send_header('Content-Type', mime)\n        self.send_header('Content-Length', str(len(content)))\n        self.end_headers()\n        self.wfile.write(content)\n",
            "parameters": [],
            "focused_calls": [
                "send_header"
            ],
            "extend_calls": [],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2024-28237/sensor-community-to-prometheus/main.py:send:18"
        },
        {
            "function_name": "do_GET",
            "file_path": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2024-28237/sensor-community-to-prometheus/main.py",
            "line_number": 26,
            "source_code": "    def do_GET(self):\n        try:\n            url = urlsplit(self.path.strip() or '/')\n            if url.path == '/metrics':\n                return self.send(metrics.generate(sensors), code=200, mime='text/plain; version=0.0.4')\n            return self.send('404 not found', code=404, mime='text/plain')\n        except Exception as e:\n            traceback.print_exc()\n            return self.send(str(e), code=500, mime='text/plain')\n",
            "parameters": [],
            "focused_calls": [
                "send"
            ],
            "extend_calls": [
                "def send(self, content: str, code: int, mime: str):\n        content = content.encode('utf8')\n        self.send_response(code)\n        self.send_header('Content-Type', mime)\n        self.send_header('Content-Length', str(len(content)))\n        self.end_headers()\n        self.wfile.write(content)",
                "def generate(sensors: list[str]) -> str:\n    node_query = '(' + 'OR'.join(f''' \"node\" = '{sensor}' ''' for sensor in sensors) + ')'\n\n    query = f'''\n        SELECT time, last(\"temperature\") AS \"temperature\"\n        FROM \"autogen\".\"sensors\" WHERE {node_query} group by type, node;\n\n        SELECT time, last(\"humidity\") AS \"humidity\"\n        FROM \"autogen\".\"sensors\" WHERE {node_query} group by type, node;\n\n        SELECT time, last(\"pressure\") / 100 AS \"pressure\"\n        FROM \"autogen\".\"sensors\" WHERE {node_query} group by type, node;\n\n        SELECT time, last(\"signal\") AS \"wifi_signal\" FROM \"autogen\".\"sensors\" WHERE {node_query} group by node;\n        SELECT time, last(\"quality\") AS \"wifi_quality\" FROM \"autogen\".\"sensors\" WHERE {node_query} group by node;\n    '''\n\n    query += ''.join(f'''\n        SELECT time, last(\"{sensor_type}_P0\") AS \"{sensor_type}_pm1\"\n        FROM \"autogen\".\"sensors\" WHERE ({node_query} AND \"type\" = '{sensor_type}') group by node;\n\n        SELECT time, last(\"{sensor_type}_P2\") AS \"{sensor_type}_pm2_5\" \n        FROM \"autogen\".\"sensors\" WHERE ({node_query} AND \"type\" = '{sensor_type}') group by node;\n\n        SELECT time, last(\"{sensor_type}_P1\") AS \"{sensor_type}_pm10\" \n        FROM \"autogen\".\"sensors\" WHERE ({node_query} AND \"type\" = '{sensor_type}') group by node;\n\n        ''' for sensor_type in ['SDS011', 'PMS', 'SPS30', 'NPM', 'HPM']\n    )\n\n    query = re.sub(r'(\\n\\s*)', '', query)\n\n    output = ''\n    r = requests.get('https://api-rrd.madavi.de:3000/grafana/api/datasources/proxy/uid/zVHIU1WMz/query?db=sensorcommunity&epoch=ms', params={\"q\": query})\n    r.raise_for_status()\n    for result in r.json()['results']:\n        if 'series' in result:\n            for record in result['series']:\n                m_tags = record['tags']\n                m_type = record['columns'][1]\n                m_time = record['values'][0][0]\n                m_value = record['values'][0][1]\n\n                if '_pm' in m_type:\n                    device_type, m_type = m_type.split('_', 1)\n                    m_tags['type'] = device_type\n\n                tag_str = ','.join(f'{k}=\"{v}\"' for k,v in record['tags'].items())\n\n                output += f'pm_sensor_{m_type}{{{tag_str}}} {m_value} {m_time}\\n'\n        elif 'error' in result:\n            print('error:', result)\n    return output"
            ],
            "conditions_for_focused_calls": {},
            "parameter_conditions": "",
            "is_vulnerability_reachable": false,
            "unique_id": "/PycharmProjects/PyVul/src/context/dataset/test_data/CVE-2024-28237/sensor-community-to-prometheus/main.py:do_GET:26"
        }
    ]
]
